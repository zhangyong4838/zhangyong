定义：组件化就是可以复用的vue的实例，准确的来讲应该是VueComponent的实例，继承自Vue
优点：提高代码的可复用性，可维护性和测试性
使用场景：
    1.通用组件：例如一些按钮组件，输入框组件，弹窗组件等
    2.业务组件：能实现一些业务，实现复用性，比如登录组件，轮播图组件等
    3.页面组件：部分独立的页面，需要的时候在各个页面来回的切换，比如说一些列表页面，详情页面
使用：
    1.定义：用vue.component(),components
    2.分类：分为有状态组件和无状态组件
    3.通信：props，$emit()/$on()，provide/inject，$children/$parent/$root/$attrs/$listeners
    4.内容分发：<slot>，<template>，v-slot
    5.使用及优化：is，keep-alive，异步组件
组件的本质
    vue中的组件经历如下过程
    组件配置 => VueComponent实例 => render() => Virtual DOM=> DOM
    所以组件的本质是产生虚拟DOM

组件间传值：
    1.父传子：props: { msg: String }   子传父：this.$emit('add', good)
    2.事件总线：任意两个组件之间传值常⽤事件总线 或 vuex的⽅式。
        // Bus：事件派发、监听和回调管理
        class Bus {
            constructor(){
                this.callbacks = {}
            }
            $on(name, fn){
                this.callbacks[name] = this.callbacks[name] || []
                this.callbacks[name].push(fn)
            }
            $emit(name, args){
                if(this.callbacks[name]){
                    this.callbacks[name].forEach(cb => cb(args))
                }
            }
        }
        // main.js
            Vue.prototype.$bus = new Bus()
        // child1
            this.$bus.$on('foo', handle)
        // child2
            this.$bus.$emit('foo')
        实践中通常用Vue代替Bus，因为Vue已经实现了相应接口
    3.$parent/$root：兄弟组件之间通信可通过共同祖辈搭桥，$parent或$root。使用的很少，原因是会产生耦合
        // brother1
            this.$parent.$on('foo', handle)
        // brother2
            this.$parent.$emit('foo')
      $children
        父组件可以通过$children访问子组件实现父子通信。
        // parent
            this.$children[0].xx = 'xxx'
    4.$children 和 $refs 的区别：
        $children，访问的一般是一个数组集合，不能保证子组件元素的顺序，一般不常用
        $refs 首先你的给子组件做标记。demo ：<firstchild ref="one"></firstchild>
        然后在父组件中，通过this.$refs.one就可以访问了这个自组件了，包括访问自组件的data里面的数据，调用它的函数
    5.provide/inject
        能够实现祖先和后代之间传值
            // ancestor
                provide() {
                    return {foo: 'foo'}
                }
            // descendant
                inject: ['foo']

插槽：
    定义： 插槽就是子组件中的提供给父组件使用的一个占位符，用<slot></slot> 表示，父组件可以在这个占位符中填充任何模板代码，
          如 HTML、组件等，填充的内容会替换子组件的<slot></slot>标签。
    分类：
        1.匿名插槽：<template v-slot:default>content...</template>
        2.具名插槽：<template v-slot:header>开课吧全栈</template>
        3.作用域插槽：<template v-slot:footer="{fc}">{{fc}}</template>