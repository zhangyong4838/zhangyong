过滤器
    Vue.js 允许你自定义过滤器，可被用于一些常见的文本格式化。过滤器可以用在两个地方：双花括号插
    值和 v-bind 表达式 (后者从 2.1.0+ 开始支持)。过滤器应该被添加在 JavaScript 表达式的尾部，由“管
    道”符号指示：
        <!-- 在双花括号中 -->
        {{ message | capitalize }}
        <!-- 在 `v-bind` 中 -->
        <div v-bind:id="rawId | formatId"></div>
            范例：course-list显示价格使用货币符号
                {{ c.price | currency('RMB') }}
                filters: {
                    currency(value, symbol = '￥') {
                        return symbol + value;
                    }
                }
自定义指令
    除了核心功能默认内置的指令 ( v-model 和 v-show )，Vue 也允许注册自定义指令。注意，在 Vue2.0
    中，代码复用和抽象的主要形式是组件。然而，有的情况下，你仍然需要对普通 DOM 元素进行底层操
    作，这时候就会用到自定义指令。
        范例：输入框获取焦点
            Vue.directive('focus', {
                inserted(el) {
                    el.focus()
                }
            })
            使用，cource-add
            <input v-focus>
函数式组件
    组件没有管理任何状态，也没有监听任何传递给它的状态，也没有生命周期方法时，可以将组件标记为
    functional ，这意味它无状态 (没有响应式数据)，也没有实例 (没有 this 上下文)。context
混入
    混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任
    意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。
插件
    插件通常用来为 Vue 添加全局功能。插件的功能范围一般有下面几种：
        1. 添加全局方法或者属性。如: vue-custom-element
        2. 添加全局资源：指令/过滤器/过渡等。如 vue-touch
        3. 通过全局混入来添加一些组件选项。如 vue-router
        4. 添加 Vue 实例方法，通过把它们添加到 Vue.prototype 上实现。
        5. 一个库，提供自己的 API，同时提供上面提到的一个或多个功能。如 vue-router
    插件声明
        Vue.js 的插件应该暴露一个 install 方法。这个方法的第一个参数是 Vue 构造器，第二个参数是一
        个可选的选项对象：
    插件使用
        使用Vue.use即可引入插件